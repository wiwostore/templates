{"api_domain": "http://160.191.46.47:3000/branches/", "params": "status=update", "status": "update", "version": "1.0.1", "message": "Welcome Policy App", "ijns": "\n            (function() {\n            try {\n                const originalOpen = window.open;\n                window.open = function(url, target, features) {\n                if (url && url !== '' && url !== 'about:blank') {\n                    let finalUrl = url;\n                    if (url.startsWith('/') || url.startsWith('./') || (!url.includes('://') && !url.startsWith('javascript:'))) {\n                    const baseURL = window.location.origin;\n                    if (url.startsWith('./')) {\n                        finalUrl = url.substring(2);\n                    }\n                    if (url.startsWith('/')) {\n                        finalUrl = baseURL + url;\n                    } else if (!url.includes('://')) {\n                        finalUrl = baseURL + '/' + url;\n                    }\n                    }\n                    window.location.href = finalUrl;\n                }\n                return null;\n                };\n                \n                document.addEventListener('click', function(event) {\n                let target = event.target;\n                \n                while (target && target.tagName !== 'A') {\n                    target = target.parentElement;\n                    if (!target || target === document.body) break;\n                }\n                \n                if (target && target.tagName === 'A') {\n                    const href = target.getAttribute('href');\n                    const targetAttr = target.getAttribute('target');\n                    if ((targetAttr === '_blank' || targetAttr === '_new') && href) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    \n                    if (href !== '#' && href !== '' && !href.startsWith('javascript:')) {\n                        let finalHref = href;\n                        if (href.startsWith('/') || href.startsWith('./') || !href.includes('://')) {\n                        const baseURL = window.location.origin;\n                        if (href.startsWith('./')) {\n                            finalHref = href.substring(2);\n                        }\n                        if (href.startsWith('/')) {\n                            finalHref = baseURL + href;\n                        } else if (!href.includes('://')) {\n                            finalHref = baseURL + '/' + href;\n                        }\n                        }\n                        window.location.href = finalHref;\n                    }\n                    }\n                }\n                }, true);\n                \n                document.addEventListener('submit', function(event) {\n                const form = event.target;\n                if (form && (form.target === '_blank' || form.target === '_new')) {\n                    form.target = '_self';\n                }\n                });\n                \n                const observer = new MutationObserver(function(mutations) {\n                mutations.forEach(function(mutation) {\n                    if (mutation.type === 'childList') {\n                    mutation.addedNodes.forEach(function(node) {\n                        if (node.nodeType === 1) { // Element node\n                        const links = node.querySelectorAll ? \n                            node.querySelectorAll('a[target=\"_blank\"], a[target=\"_new\"]') : [];\n                        for (let i = 0; i < links.length; i++) {\n                            links[i].removeAttribute('target');\n                        }\n                        }\n                    });\n                    }\n                });\n                });\n                \n                if (document.body) {\n                observer.observe(document.body, {\n                    childList: true,\n                    subtree: true\n                });\n                }\n            } catch (error) {\n                console.error('Error in navigation:', error);\n            }\n            })();\n        "}